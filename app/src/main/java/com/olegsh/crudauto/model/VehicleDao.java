package com.olegsh.crudauto.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEHICLES".
*/
public class VehicleDao extends AbstractDao<Vehicle, Long> {

    public static final String TABLENAME = "VEHICLES";

    /**
     * Properties of entity Vehicle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DriverId = new Property(1, Long.class, "driverId", false, "DRIVER_ID");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
    }

    private DaoSession daoSession;

    private Query<Vehicle> driver_VehiclesQuery;

    public VehicleDao(DaoConfig config) {
        super(config);
    }
    
    public VehicleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEHICLES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DRIVER_ID\" INTEGER," + // 1: driverId
                "\"NUMBER\" TEXT NOT NULL ," + // 2: number
                "\"NAME\" TEXT NOT NULL );"); // 3: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEHICLES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Vehicle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindLong(2, driverId);
        }
        stmt.bindString(3, entity.getNumber());
        stmt.bindString(4, entity.getName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Vehicle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindLong(2, driverId);
        }
        stmt.bindString(3, entity.getNumber());
        stmt.bindString(4, entity.getName());
    }

    @Override
    protected final void attachEntity(Vehicle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Vehicle readEntity(Cursor cursor, int offset) {
        Vehicle entity = new Vehicle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // driverId
            cursor.getString(offset + 2), // number
            cursor.getString(offset + 3) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Vehicle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDriverId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNumber(cursor.getString(offset + 2));
        entity.setName(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Vehicle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Vehicle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Vehicle entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "vehicles" to-many relationship of Driver. */
    public List<Vehicle> _queryDriver_Vehicles(Long driverId) {
        synchronized (this) {
            if (driver_VehiclesQuery == null) {
                QueryBuilder<Vehicle> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DriverId.eq(null));
                driver_VehiclesQuery = queryBuilder.build();
            }
        }
        Query<Vehicle> query = driver_VehiclesQuery.forCurrentThread();
        query.setParameter(0, driverId);
        return query.list();
    }

}
